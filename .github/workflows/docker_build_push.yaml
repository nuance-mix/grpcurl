---
on:
  push:
    branches:
      - '**'        # matches every branch
    tags:
      - '*'         # matches every tag that doesn't contain a '/'

jobs:
  build_and_push_image:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=xmix-docker-dev/grpcurl
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          # TODO: Refine... was creating too many hashes
          # if [ "${{ github.event_name }}" = "push" ]; then
          #   TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          # fi
          # if we pushed a tag, we also want publish a new latest image
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo "TAGS to build and push are ${TAGS}"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.prep.outputs.version }}
      # -
      #   name: Test
      #   run: |
      #     echo "something"
      #     docker run --rm ${{ steps.prep.outputs.version }}
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USER: ${{ secrets.XMIX_PUBLISH_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_USER_PASSWORD }}
      - name: Run JFrog CLI
        run: |
          jfrog --version
          jfrog config add --user=${ARTIFACTORY_USER} --password=${ARTIFACTORY_USER_PASSWORD} --artifactory-url=${ARTIFACTORY_URL} --interactive=false nuance-artifactory
      # -
      #   name: Login to Nuance JFrog Artifactory
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1
      #   with:
      #     registry: entrd-jfrog.ent.nuance.com
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.prep.outputs.tags }}
      #     labels: |
      #       org.opencontainers.image.source=${{ github.event.repository.html_url }}
      #       org.opencontainers.image.created=${{ steps.prep.outputs.created }}
      #       org.opencontainers.image.revision=${{ github.sha }}
